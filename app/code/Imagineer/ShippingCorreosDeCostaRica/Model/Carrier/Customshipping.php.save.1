<?php

namespace Imagineer\ShippingCorreosDeCostaRica\Model\Carrier;

use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\DataObject;
use Magento\Shipping\Model\Carrier\AbstractCarrier;
use Magento\Shipping\Model\Carrier\CarrierInterface;
use Magento\Shipping\Model\Config;
use Magento\Shipping\Model\Rate\ResultFactory;
use Magento\Store\Model\ScopeInterface;
use Magento\Quote\Model\Quote\Address\RateResult\ErrorFactory;
use Magento\Quote\Model\Quote\Address\RateResult\Method;
use Magento\Quote\Model\Quote\Address\RateResult\MethodFactory;
use Magento\Quote\Model\Quote\Address\RateRequest;
use Psr\Log\LoggerInterface;
 
class Customshipping extends AbstractCarrier implements CarrierInterface 
{
    private $cantonesEnGAM = array(
	'101','102','103','106','107','108','109','110','111','113','114','115','118',/*SJ*/
	'201','202','205', /*ALAJUELA*/
	'301','302','303','306','307','308', /*CARTAGO*/
	'401','402','403','404','405','406','407','408','409' /*HEREDIA*/
    );
    
    /*
        ws pruebas: http://amistad.correos.go.cr:82/wserPruebas/wsAppCorreos.wsAppCorreos.svc
        ws produccion: http://amistadpro.correos.go.cr:88/wserproduccion/wsAppCorreos.wsAppCorreos.svc
    */
    private $ws;

    /**
     
    * Carrier's code
    *
    * @var string
    */
    
    protected $_code = 'shippingcorreosdecostarica';
    /**
    * Whether this carrier has fixed rates calculation
    *
    * @var bool
    */
    
    protected $_isFixed = true;
    /**
    * @var ResultFactory
    */
    
    protected $_rateResultFactory;
    /**
    * @var MethodFactory
    */
    
    protected $scopeConfig;
    
    protected $_rateMethodFactory;
    /**
    * @param ScopeConfigInterface $scopeConfig
    * @param ErrorFactory $rateErrorFactory
    * @param LoggerInterface $logger
    * @param ResultFactory $rateResultFactory
    * @param MethodFactory $rateMethodFactory
    * @param array $data
    */
 
    public function __construct(
        ScopeConfigInterface $scopeConfig,
        ErrorFactory $rateErrorFactory,
        LoggerInterface $logger,
        ResultFactory $rateResultFactory,
        MethodFactory $rateMethodFactory,
        array $data = []
    ) {
        $this->_rateResultFactory = $rateResultFactory;
        $this->_rateMethodFactory = $rateMethodFactory;
        parent::__construct($scopeConfig, $rateErrorFactory, $logger, $data);
 	$this->scopeConfig = $scopeConfig;
	
	}
    
    /**
    * Generates list of allowed carrier`s shipping methods
    * Displays on cart price rules page
    *
    * @return array
    * @api
    */
    
    public function getAllowedMethods()
    {
        return [$this->getCarrierCode() => __($this->getConfigData('name'))];
    }

    /**
    * Collect and get rates for storefront
    *
    * @SuppressWarnings(PHPMD.UnusedFormalParameter)
    * @param RateRequest $request
    * @return DataObject|bool|null
    * @api
    */
    
    public function collectRates(RateRequest $request)
    {
        /**
        * Make sure that Shipping method is enabled
        */
	$ws=$this->scopeConfig->getValue('carriers/imagineer_shippingcorreosdecostarica/webservice',\Magento\Store\Model\ScopeInterface::SCOPE_STORE);	
        $writer = new \Zend\Log\Writer\Stream(BP.'/var/log/aproxEnvio.log');
        $logger = new \Zend\Log\Logger();
        $logger->addWriter($writer);
$logger->info($this->scopeConfig->getValue('carriers/imagineer_shippingcorreosdecostarica/active',\Magento\Store\Model\ScopeInterface::SCOPE_STORE));
    
        if (!($this->scopeConfig->getValue('carriers/imagineer_shippingcorreosdecostarica/active',\Magento\Store\Model\ScopeInterface::SCOPE_STORE))) {
            return false;
        }
	


        $zip = $request->getDestPostcode();
	//Correos calcula los pesos en gramos
	$weight = 0;
	//$addressData = "Pais: ".$request->getDestCountryId()." Ciudad: ".$request->getDestRegionId()." Calle: ".$request->getSestStreet()." Zip: ".$request->getDestPostcode();
	switch ($this->scopeConfig->getValue('carriers/imagineer_shippingcorreosdecostarica/unidadpeso',\Magento\Store\Model\ScopeInterface::SCOPE_STORE)) {
    		case "kilogramos":
       			$weight = $request->getPackageWeight()*1000;
        	break;
    		case "libras":
        		$weight = $request->getPackageWeight()*454;
        	break;
	    	case "gramos":
        		$weight = $request->getPackageWeight();
        	break;
	}
	$logger->info("weight: ".$weight." zipDest: ".$zip);


        if($zip != "" && $weight != ""){
            $shippingRate = $this->averiguarPrecio($weight, $zip, $ws);
	$logger->info("respuesta: ".$shippingRate);

            $shippingRate = explode('<', explode('CostoColones>', $shippingRate)[1])[0]; //<a:CostoColones>XXXX,XX</a:CostoColones> a XXXX,XX
            if($shippingRate =="0") return false; 
            //$logger->info("Costo de envio: ".print_r($shippingRate, true)." peso: ".$weight." zip: ".$zip);
        }else{
	        return false;
        }
        /** @var \Magento\Shipping\Model\Rate\Result $result */
        $result = $this->_rateResultFactory->create();
        $shippingPrice = $this->getConfigData('price');
        $method = $this->_rateMethodFactory->create();

        /**
        * Set carrier's method data
        */
        $method->setCarrier($this->getCarrierCode());
        $method->setCarrierTitle($this->getConfigData('title'));
        /**
        * Displayed as shipping method under Carrier
        */
       	$method->setMethod($this->getCarrierCode());
	    if(in_array(substr($zip, 0, 3), $this->cantonesEnGAM)){
       		$method->setMethodTitle('Tarifa de envio aproximada');
        	$method->setPrice($shippingRate);
	        $method->setCost($shippingRate);
	    } else {
        	$method->setMethodTitle('EnvÃ­o gratuito fuera de la GAM');
        	$method->setPrice('0');
        	$method->setCost('0');
	    }
        $result->append($method);
        return $result;
    } 

    public function averiguarPrecio(int $peso, string $zip, string $ws){
        /* pruebas
        $user = 'ccrWS10765';
        $pass = 'FIHTRQPDU8';
        */
        /*produccion*/
        $writer = new \Zend\Log\Writer\Stream(BP.'/var/log/aproxEnvio.log');
        $logger = new \Zend\Log\Logger();
        $logger->addWriter($writer);


        $user = $this->scopeConfig->getValue('carriers/imagineer_shippingcorreosdecostarica/usuarioid',\Magento\Store\Model\ScopeInterface::SCOPE_STORE);
        $pass = $this->scopeConfig->getValue('carriers/imagineer_shippingcorreosdecostarica/password',\Magento\Store\Model\ScopeInterface::SCOPE_STORE);
        $zipRemitente =  $this->scopeConfig->getValue('carriers/imagineer_shippingcorreosdecostarica/codigopostalremitente',\Magento\Store\Model\ScopeInterface::SCOPE_STORE);
        $puerto = $this->scopeConfig->getValue('carriers/imagineer_shippingcorreosdecostarica/puerto',\Magento\Store\Model\ScopeInterface::SCOPE_STORE);
	$msg = "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><s:Body><ccrMovilTarifaCCR xmlns=\"http://tempuri.org/\"><resTarifa xmlns:a=\"http://schemas.datacontract.org/2004/07/wsAppCorreos\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><a:Cantidad>1</a:Cantidad><a:Pais>CR</a:Pais><a:Peso>".$peso."</a:Peso><a:Prioridad i:nil=\"true\"/><a:Servicio>PYMEXPRESS</a:Servicio><a:TipoEnvio>1</a:TipoEnvio><a:ZonDestino>".$zip."</a:ZonDestino><a:ZonUbicacion>".$zipRemitente."</a:ZonUbicacion></resTarifa><User>".$user."</User><Pass>".$pass."</Pass></ccrMovilTarifaCCR></s:Body></s:Envelope>";
	$logger->info("user:".$user. " pass:".$pass." puerto:".$puerto." zip:".$zipRemitente." ws: ".$ws." msg: ".$msg);

	$curl = curl_init(); 
        curl_setopt_array($curl, array(
        CURLOPT_PORT => $puerto,
        CURLOPT_URL => $ws,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => "",
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 30,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => "POST",
        CURLOPT_POSTFIELDS => $msg,
        CURLOPT_HTTPHEADER => array(
		"Accept: */*",
    		"Accept-Encoding: gzip, deflate",
		"Cache-Control: no-cache",
  		"Connection: keep-alive",
    		"Host: amistad.correos.go.cr:".$puerto,
               "Content-Type: text/xml",
               "Postman-Token: 868767be-752d-41de-8eaf-d4db86e00877,8ae9bb39-3376-49be-bbbd-b37420ad382d",
               "SOAPAction: http://tempuri.org/IwsAppCorreos/ccrMovilTarifaCCR",
               "User-Agent: PostmanRuntime/7.19.0",
		"cache-control: no-cache"
            ),
        ));

        $response = curl_exec($curl); 
        $err = curl_error($curl); 
        curl_close($curl); 
        if ($err) {
	        return "cURL Error #:" . $err;
        } else {
	        return $response;
        }
    }
}

